class BackgroundColor {
  constructor() {
    this.time = {
      waitTimeMean: 1000, // milliseconds
      waitTimeStandardDeviation: 0 // milliseconds;
    };
    
    this.hue = {
      level: null,
      fluctuationMean: 0,
      fluctuationStdDev: 1
    };
  
    this.saturation = {
      level: null,
      fluctuationMean: 0,
      fluctuationStdDev: 1
    };
  
    this.lightness = {
      level: null,
      fluctuationMean: 0,
      fluctuationStdDev: 1
    };
    
    this.randomizeBackgroundColorAttributes();
    this.setBackgroundColor();
  }
  
  randomizeBackgroundColorAttributes() {
    var hue = randomNumbers.getRandomNumber() * 360;
    var saturation = randomNumbers.getRandomNumber() * 100;
    var lightness = randomNumbers.getRandomNumber() * 100;
  
    this.hue.level = UnbiasedRounding.statisticiansRounding(hue, 0);
    this.saturation.level = UnbiasedRounding.statisticiansRounding(saturation, 0);
    this.lightness.level = UnbiasedRounding.statisticiansRounding(lightness, 0);
  }
  
  setBackgroundColor() {
    var hue = this.hue.level;
    var saturation = this.saturation.level;
    var lightness = this.lightness.level;
  
    document.body.style.backgroundColor = "hsl(" + hue + ", " + saturation + "%, " + lightness + "%)";
  }
  
  fluctuateBackgroundColor() {
    var fluctuatingAttribute = this.determineFluctuatingAttribute.call(this);  
    this.fluctuateAttribute.call(this, fluctuatingAttribute);
    this.checkLimitsOfAttributes.call(this);
    this.setBackgroundColor.call(this);  
  }
  
  determineFluctuatingAttribute() {
    var randomRoll = randomNumbers.getRandom();
 
    if (randomRoll <= 1/3) {
      return this.hue;
    } else if (randomRoll <= 2/3) {
      return this.saturation;
    } else if (randomRoll <= 1) {
      return this.lightness;
    }
  }
  
  fluctuateAttribute(fluctuatingAttribute) {
    var mean = fluctuatingAttribute.fluctuationMean;
    var variance = Math.pow(fluctuatingAttribute.fluctuationStdDev, 2);
  
    var distribution = gaussian(mean, variance);
    var sample = distribution.ppf(randomNumbers.getRandomNumber());
  
    fluctuatingAttribute.level += sample;
  }
  
  checkLimitsOfAttributes() {
    if (this.hue.level < 0) {
      this.hue.level += 360;
    } else if (this.hue.level > 360) {
      this.hue.level -= 360;
    }
  
    if (this.saturation.level < 0) {
      this.saturation.level = 0;
    } else if (this.saturation.level > 100) {
      this.saturation.level = 100;
    }
  
    if (this.lightness.level < 0) {
      this.lightness.level = 0;
    } else if (this.lightness.level > 100) {
      this.lightness.level = 100;
    }
  } 
}
